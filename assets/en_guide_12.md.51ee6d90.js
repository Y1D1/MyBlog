import{_ as e,o as n,c as t,Q as o}from"./chunks/framework.48f6ae32.js";const f=JSON.parse('{"title":"SSM integration understanding","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/12.md","filePath":"en/guide/12.md"}'),a={name:"en/guide/12.md"},i=o('<h1 id="ssm-integration-understanding" tabindex="-1">SSM integration understanding <a class="header-anchor" href="#ssm-integration-understanding" aria-label="Permalink to &quot;SSM integration understanding&quot;">​</a></h1><h2 id="_1-2-the-core-issues-of-ssm-integration-are-clear" tabindex="-1">1.2 The core issues of SSM integration are clear <a class="header-anchor" href="#_1-2-the-core-issues-of-ssm-integration-are-clear" aria-label="Permalink to &quot;1.2 The core issues of SSM integration are clear&quot;">​</a></h2><h4 id="_1-2-1-question-1-how-many-ioc-containers-does-ssm-integration-require" tabindex="-1">1.2.1 Question 1: How many IoC containers does SSM integration require? <a class="header-anchor" href="#_1-2-1-question-1-how-many-ioc-containers-does-ssm-integration-require" aria-label="Permalink to &quot;1.2.1 Question 1: How many IoC containers does SSM integration require?&quot;">​</a></h4><p>Two containers</p><p>In essence, integration is a three-tier architecture and framework core API components that are managed by the SpringIoC container!</p><p>One container may be enough, but our common operation is to create two IoC containers (web and root), component classification management!</p><p>This practice has the following benefits and purposes:</p><ol><li>Separate concerns: By initializing two containers, you can separate concerns at all levels. This separation allows components at each level to better focus on their respective responsibilities and functions.</li><li>Decoupling: Components at each level are separated and assembled into different IoC containers, which can be decoupled. This decoupling allows each module to operate and test independently, improving the maintainability and testability of the code.</li><li>Flexible configuration: By using two containers, each container can be provided with its own configuration to meet the specific needs of different levels and components. Each profile is also clearer and more flexible.</li></ol><p>In general, initializing two containers in SSM integration can achieve benefits such as separation of concerns, decoupling, and flexible configuration. They each take care of different layers and functions, and work together with the right integration to provide an efficient, maintainable, and scalable application architecture!</p><h4 id="_1-2-2-second-question-what-types-of-components-does-each-ioc-container-correspond-to" tabindex="-1">1.2.2 Second question: What types of components does each IoC container correspond to? <a class="header-anchor" href="#_1-2-2-second-question-what-types-of-components-does-each-ioc-container-correspond-to" aria-label="Permalink to &quot;1.2.2 Second question: What types of components does each IoC container correspond to?&quot;">​</a></h4><p>Illustration:</p><p>In SUMMARY:</p><table><thead><tr><th>The container name</th><th>holds the component</th></tr></thead><tbody><tr><td>web container</td><td>Web-related component (controller,springmvc core component)</td></tr><tr><td></td><td>root container business and persistence layer related components (service, aop, tx, dataSource, mybatis mapper)</td></tr></tbody></table><h4 id="_1-2-3-third-question-ioc-container-relationship-and-call-direction" tabindex="-1">1.2.3 Third question: IoC container relationship and call direction? <a class="header-anchor" href="#_1-2-3-third-question-ioc-container-relationship-and-call-direction" aria-label="Permalink to &quot;1.2.3 Third question: IoC container relationship and call direction?&quot;">​</a></h4><p>Case 1: Components cannot be injected between two unrelated IoC containers!</p><p>Case 2: The child IoC container can inject components of the parent IoC container unidirectionally!</p><p>Conclusion: The web container is a child container of the root container.</p><ul><li>Parent container: A root container that contains components such as service, mapper, and mybatis</li><li>Subcontainer: web container that houses controller and Web-related components</li></ul>',18),r=[i];function s(c,d,l,h,p,u){return n(),t("div",null,r)}const g=e(a,[["render",s]]);export{f as __pageData,g as default};
