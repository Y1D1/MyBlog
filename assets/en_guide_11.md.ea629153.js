import{_ as e,o as a,c as n,Q as t}from"./chunks/framework.48f6ae32.js";const _=JSON.parse('{"title":"SSM integration understanding","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/11.md","filePath":"en/guide/11.md"}'),i={name:"en/guide/11.md"},r=t('<h1 id="ssm-integration-understanding" tabindex="-1">SSM integration understanding <a class="header-anchor" href="#ssm-integration-understanding" aria-label="Permalink to &quot;SSM integration understanding&quot;">​</a></h1><h2 id="_1-1-what-is-ssm-integration" tabindex="-1">1.1 What is SSM Integration? <a class="header-anchor" href="#_1-1-what-is-ssm-integration" aria-label="Permalink to &quot;1.1 What is SSM Integration?&quot;">​</a></h2><p>** Micro ** : Apply the Spring SpringMVC Mybatis framework to the project!</p><ul><li>The SpringMVC framework is responsible for the control layer The Spring framework is responsible for declarative transaction management at the overall and business levels</li><li>The MyBatis framework is responsible for the database access layer</li></ul><p>** Macro ** : Spring takes over (leaving the core components of the framework to Spring for IoC management) and the code is much cleaner.</p><ul><li>SpringMVC management presentation layer, SpringMVC related components</li><li>Spring manages the business layer, persistence layer, and database-related (DataSource,MyBatis) components</li><li>Manage all required components using IoC</li></ul><p>** Implementation ** : By writing configuration files, the SpringIoC container takes over all components.</p>',7),o=[r];function s(l,c,d,p,g,m){return a(),n("div",null,o)}const u=e(i,[["render",s]]);export{_ as __pageData,u as default};
