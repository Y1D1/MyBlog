import{_ as t,o as a,c as e,Q as o}from"./chunks/framework.48f6ae32.js";const S=JSON.parse('{"title":"SSM整合理解","description":"","frontmatter":{},"headers":[],"relativePath":"guide/12.md","filePath":"guide/12.md"}'),r={name:"guide/12.md"},i=o('<h1 id="ssm整合理解" tabindex="-1">SSM整合理解 <a class="header-anchor" href="#ssm整合理解" aria-label="Permalink to &quot;SSM整合理解&quot;">​</a></h1><h2 id="_1-2-ssm整合核心问题明确" tabindex="-1">1.2 SSM整合核心问题明确 <a class="header-anchor" href="#_1-2-ssm整合核心问题明确" aria-label="Permalink to &quot;1.2 SSM整合核心问题明确&quot;">​</a></h2><h4 id="_1-2-1-第一问-ssm整合需要几个ioc容器" tabindex="-1">1.2.1 第一问：SSM整合需要几个IoC容器？ <a class="header-anchor" href="#_1-2-1-第一问-ssm整合需要几个ioc容器" aria-label="Permalink to &quot;1.2.1 第一问：SSM整合需要几个IoC容器？&quot;">​</a></h4><p>两个容器</p><p>本质上说，整合就是将三层架构和框架核心API组件交给SpringIoC容器管理！</p><p>一个容器可能就够了，但是我们常见的操作是创建两个IoC容器（web容器和root容器），组件分类管理！</p><p>这种做法有以下好处和目的：</p><ol><li>分离关注点：通过初始化两个容器，可以将各个层次的关注点进行分离。这种分离使得各个层次的组件能够更好地聚焦于各自的责任和功能。</li><li>解耦合：各个层次组件分离装配不同的IoC容器，这样可以进行解耦。这种解耦合使得各个模块可以独立操作和测试，提高了代码的可维护性和可测试性。</li><li>灵活配置：通过使用两个容器，可以为每个容器提供各自的配置，以满足不同层次和组件的特定需求。每个配置文件也更加清晰和灵活。</li></ol><p>总的来说，初始化两个容器在SSM整合中可以实现关注点分离、解耦合、灵活配置等好处。它们各自负责不同的层次和功能，并通过合适的集成方式协同工作，提供一个高效、可维护和可扩展的应用程序架构！</p><h4 id="_1-2-2-第二问-每个ioc容器对应哪些类型组件" tabindex="-1">1.2.2 第二问：每个IoC容器对应哪些类型组件？ <a class="header-anchor" href="#_1-2-2-第二问-每个ioc容器对应哪些类型组件" aria-label="Permalink to &quot;1.2.2 第二问：每个IoC容器对应哪些类型组件？&quot;">​</a></h4><p>总结：</p><table><thead><tr><th>容器名</th><th>盛放组件</th></tr></thead><tbody><tr><td>web容器</td><td>web相关组件（controller,springmvc核心组件）</td></tr><tr><td>root容器</td><td>业务和持久层相关组件（service,aop,tx,dataSource,mybatis,mapper等）</td></tr></tbody></table><h4 id="_1-2-3-第三问-ioc容器之间关系和调用方向" tabindex="-1">1.2.3 第三问：IoC容器之间关系和调用方向？ <a class="header-anchor" href="#_1-2-3-第三问-ioc容器之间关系和调用方向" aria-label="Permalink to &quot;1.2.3 第三问：IoC容器之间关系和调用方向？&quot;">​</a></h4><p>情况1：两个无关联IoC容器之间的组件无法注入！</p><p>情况2：子IoC容器可以单向的注入父IoC容器的组件！</p><p>结论：web容器是root容器的子容器，父子容器关系。</p><ul><li>父容器：root容器，盛放service、mapper、mybatis等相关组件</li><li>子容器：web容器，盛放controller、web相关组件</li></ul>',17),l=[i];function s(d,c,h,n,p,_){return a(),e("div",null,l)}const b=t(r,[["render",s]]);export{S as __pageData,b as default};
